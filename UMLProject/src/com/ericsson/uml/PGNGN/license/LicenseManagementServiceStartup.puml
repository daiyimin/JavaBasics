@startuml
box "DVE Application" #LightGreen
	participant LicenseServiceStarter
end box
box "DVE ValuePackage" #LightBlue
	participant Scheduler
	participant ValuePackageImpl
	participant ValuePackages
	participant ValuePackageLicenseServiceImpl
	participant LicenseNotificationReceiverImpl
	participant CommonLicense
end box
box "LicenseManagementService Implementation Zookeeper" #Wheat
	participant LicenseManagementService
	participant SentinelLicenseManager
end box

[-> LicenseServiceStarter: start()
activate LicenseServiceStarter
LicenseServiceStarter -> Scheduler: start()
activate Scheduler
note right
1. Start a scheduler to validate the capacity usage periodically
When scheduler timeout, it will invoke schedulerExpired() of its listener.
end note
Scheduler -> LicenseServiceStarter
deactivate Scheduler
LicenseServiceStarter -> LicenseServiceStarter: getValuePackages()
activate LicenseServiceStarter
deactivate LicenseServiceStarter
LicenseServiceStarter -> ValuePackages: initiate()
activate ValuePackages
note right
2. Import Value Package structure into memory
This method read the valuePackage.xml, licenseItem.xml and mosMapping.xml
and create java objects represent value package, licenseItem and Mos.
end note
ValuePackages -> LicenseServiceStarter
deactivate ValuePackages
LicenseServiceStarter -> ValuePackageLicenseServiceImpl: setValuePackages()
activate ValuePackageLicenseServiceImpl
ValuePackageLicenseServiceImpl -> LicenseServiceStarter
deactivate ValuePackageLicenseServiceImpl
LicenseServiceStarter -> LicenseNotificationReceiverImpl: new LicenseNotificationReceiverImpl(ValuePackageLicenseServiceImpl)
activate LicenseNotificationReceiverImpl
note right
3. LicenseNotificationReceiverImpl
LicenseNotificationReceiverImpl receive Sentinel license changes.
It will then notify ValuePackageLicenseServiceImpl in turn.
end note
LicenseNotificationReceiverImpl -> LicenseServiceStarter
deactivate LicenseNotificationReceiverImpl
LicenseServiceStarter -> LicenseManagementService: start()
activate LicenseManagementService
LicenseManagementService -> LicenseManagementService: updateLicenses()
activate LicenseManagementService
LicenseManagementService -> LicenseManagementService: performLicenseUpdateAndCheck()
activate LicenseManagementService
LicenseManagementService -> LicenseManagementService: updateCapacityLicenses()
activate LicenseManagementService
LicenseManagementService -> SentinelLicenseManager: getCapacityLicenses()
activate SentinelLicenseManager
note left
4. Load license from sentinel server
It reads license capacity info from sentinel server.
(Use capacity license as example here)
end note
SentinelLicenseManager -> LicenseManagementService
deactivate SentinelLicenseManager
LicenseManagementService -> LicenseManagementService: checkForNewOrModifiedCapacityLicense()
activate LicenseManagementService
note left
5. Notify license listeners
For each capacity license, it asks notifier class to notify its listener
end note
LicenseManagementService -> LicenseNotificationReceiverImpl: licenseAdded()
activate LicenseNotificationReceiverImpl
LicenseNotificationReceiverImpl -> ValuePackageLicenseServiceImpl: addValuePackage(ValuePackageCapacityLicenseImpl)
activate ValuePackageLicenseServiceImpl
note right
6 Notify a listener
Notifier encapsulate capacity license into a ValuePackageCapacityLicenseImpl.
Then call ValuePackageLicenseServiceImpl to add capacity for a value package.
end note
ValuePackageLicenseServiceImpl -> ValuePackageLicenseServiceImpl: registerAndRunScheduler()
activate ValuePackageLicenseServiceImpl
ValuePackageLicenseServiceImpl -> ValuePackages: getLicenses().get(licenseId)
activate ValuePackages
note right
6.1 Return a value package object
To find impacted value package, it matches capacity license name with value package id, i.e. FAT....
end note
ValuePackages -> ValuePackageLicenseServiceImpl
deactivate ValuePackages

ValuePackageLicenseServiceImpl -> ValuePackageImpl: setCapacity()
activate ValuePackageImpl
note right
6.2 Set capacity of value package object
end note
ValuePackageImpl -> ValuePackageLicenseServiceImpl
deactivate ValuePackageImpl

ValuePackageLicenseServiceImpl -> Scheduler: registerListener(ValuePackage)
activate Scheduler
note right
6.3 Register ValuePackage object as listener in scheduler
The scheduler in step 1 will call listener when timeout from now on.
end note
Scheduler -> ValuePackageLicenseServiceImpl
deactivate Scheduler

ValuePackageLicenseServiceImpl -> CommonLicense: schedulerExpired()
activate CommonLicense
note right
6.4 Call schedule job once
To validate capacity from beginning
The real job is done in the child class of CommonLicense.
In this case, it is ValuePackageImpl.
end note
CommonLicense -> ValuePackageLicenseServiceImpl
deactivate CommonLicense

deactivate ValuePackageLicenseServiceImpl
ValuePackageLicenseServiceImpl -> LicenseNotificationReceiverImpl
deactivate ValuePackageLicenseServiceImpl
LicenseNotificationReceiverImpl -> LicenseManagementService
deactivate LicenseNotificationReceiverImpl
deactivate LicenseManagementService
deactivate LicenseManagementService
deactivate LicenseManagementService
deactivate LicenseManagementService
LicenseManagementService -> LicenseServiceStarter
deactivate LicenseManagementService

deactivate LicenseServiceStarter

@enduml